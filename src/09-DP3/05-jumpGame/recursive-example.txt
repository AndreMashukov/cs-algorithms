Problem: Jump Game (Recursive Example)

Input: nums = [2, 1, 0]
Goal: Determine if we can reach the last index (index 2)

Step-by-Step Execution:

1. Initial Call: canReachTarget(0)
   - position = 0, target = 2
   - nums[0] = 2, so maxJump = 2
   - Try jumps: 1 and 2

2. Try jump = 1: canReachTarget(0 + 1 = 1)
   - position = 1, target = 2
   - nums[1] = 1, so maxJump = 1
   - Try jump: 1

3. From position 1, try jump = 1: canReachTarget(1 + 1 = 2)
   - position = 2, target = 2
   - Base case: position >= target (2 >= 2) âœ“
   - Return true

4. Back to position 1:
   - canReachTarget(2) returned true
   - Cache: memo[1] = true
   - Return true

5. Back to position 0:
   - canReachTarget(1) returned true
   - No need to try jump = 2
   - Cache: memo[0] = true
   - Return true

Memoization Cache Final State:
- memo[0] = true (can reach target from position 0)
- memo[1] = true (can reach target from position 1)

Output: true

Alternative Example with Failure:
Input: nums = [1, 0, 1]

1. canReachTarget(0): nums[0] = 1, try jump = 1
2. canReachTarget(1): nums[1] = 0, maxJump = 0
   - Cannot make any jumps, return false
3. Back to position 0: no more jumps to try, return false

Output: false

Key Insights:
- The recursive approach explores all possible paths
- Memoization prevents recalculating the same position multiple times
- Base case succeeds when we reach or exceed the target index