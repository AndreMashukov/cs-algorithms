Problem: Pascal's Triangle (Recursive with Memoization)

Let's trace through generate_dfs(4) step by step:

Step 1: Main function calls dfs(0), dfs(1), dfs(2), dfs(3)

Step 2: Process dfs(0) - Base case
- Return [1]
- memo[0] = [1]

Step 3: Process dfs(1) - Base case  
- Return [1, 1]
- memo[1] = [1, 1]

Step 4: Process dfs(2)
- Get prevRow = dfs(1) = [1, 1]
- Create currentRow = [1]
- For i=1: leftParent = 1, rightParent = 1
- currentRow.push(1 + 1 = 2)
- currentRow.push(1)
- Result: [1, 2, 1]
- memo[2] = [1, 2, 1]

Step 5: Process dfs(3)
- Get prevRow = dfs(2) = [1, 2, 1] (from memo)
- Create currentRow = [1]
- For i=1: leftParent = 1, rightParent = 2
- currentRow.push(1 + 2 = 3)
- For i=2: leftParent = 2, rightParent = 1  
- currentRow.push(2 + 1 = 3)
- currentRow.push(1)
- Result: [1, 3, 3, 1]
- memo[3] = [1, 3, 3, 1]

Step 6: Collect results
- result = [[1], [1,1], [1,2,1], [1,3,3,1]]

Final Result: [[1], [1,1], [1,2,1], [1,3,3,1]]

Memoization benefits: Each row is computed only once, even if requested multiple times.