Problem: Different Ways to Add Parentheses (DFS with Memoization)

Q1: For expression "2-1-1", which subexpressions get computed first in the DFS traversal?
1. "2-1" and "1-1"
2. "2" and "1"
3. "2-1-1" only
4. "-1-1" and "2-"

Q2: When the recursive function encounters "11" (just a number), what does it return?
1. An empty array []
2. The array [11]
3. The number 11
4. The string "11"

Q3: For expression "2*3-4", when splitting at the '*' operator, what are leftExpr and rightExpr?
1. leftExpr = "2*", rightExpr = "3-4"
2. leftExpr = "2", rightExpr = "3-4"
3. leftExpr = "2*3", rightExpr = "-4"
4. leftExpr = "2", rightExpr = "*3-4"

Q4: How many times is dfs("1") called when processing "2-1-1"?
1. Once
2. Twice
3. Three times
4. Never

Q5: For expression "2+3*4", why does the result contain both 14 and 20?
1. Because of operator precedence rules
2. Because (2+3)*4 = 20 and 2+(3*4) = 14
3. Because the algorithm has an error
4. Because multiplication is performed before addition

Q6: What is the purpose of the nested loops when combining leftResults and rightResults?
1. To generate all possible combinations of left and right results with the operator
2. To find the minimum and maximum results only
3. To sort the results in ascending order
4. To eliminate duplicate results

Q7: For expression "2*3-4*5", how many operators cause the algorithm 
to split the expression at the top level?
1. 1
2. 2
3. 3
4. 4