Dungeon Game - Dynamic Programming Solution Example

Let's trace through the same 2x2 dungeon: [[-3, 5], [0, -4]]

Goal: Build a DP table to find minimum initial health needed.

Initial dungeon:
[[-3,  5]
 [ 0, -4]]

Step 1: Initialize DP table (2x2)
[[0, 0]
 [0, 0]]

Step 2: Fill base case - bottom-right corner (1,1)
- At destination, need health after room effect
- dp[1][1] = Math.max(1, 1 - (-4)) = Math.max(1, 5) = 5

DP table:
[[0, 0]
 [0, 5]]

Step 3: Fill last row (only one cell: dp[1][0])
- Can only go right to (1,1)
- Need enough health to have dp[1][1] = 5 after this room
- dp[1][0] = Math.max(1, 5 - 0) = Math.max(1, 5) = 5

DP table:
[[0, 0]
 [5, 5]]

Step 4: Fill last column (only one cell: dp[0][1])
- Can only go down to (1,1)
- Need enough health to have dp[1][1] = 5 after this room
- dp[0][1] = Math.max(1, 5 - 5) = Math.max(1, 0) = 1

DP table:
[[0, 1]
 [5, 5]]

Step 5: Fill remaining cell dp[0][0]
- Can go right (needs dp[0][1] = 1) or down (needs dp[1][0] = 5)
- Choose minimum: min(1, 5) = 1
- dp[0][0] = Math.max(1, 1 - (-3)) = Math.max(1, 4) = 4

Final DP table:
[[4, 1]
 [5, 5]]

Answer: dp[0][0] = 4

Verification of optimal path (0,0) → (0,1) → (1,1):
- Start with health 4
- Room (0,0): 4 + (-3) = 1
- Room (0,1): 1 + 5 = 6
- Room (1,1): 6 + (-4) = 2
- Knight survives with 2 health!