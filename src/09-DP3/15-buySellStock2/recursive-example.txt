Best Time to Buy and Sell Stock II - Recursive Example

Let's trace through the recursive solution with a simple example: prices = [1, 3, 2]

Initial call: dfs(0, false)
- We start at day 0, not holding any stock

Step 1: dfs(0, false)
- At day 0, not holding stock
- Option 1: Buy stock → -1 + dfs(1, true)
- Option 2: Skip → dfs(1, false)
- Need to explore both paths

Step 2: Exploring buy path: dfs(1, true)
- At day 1, holding stock (bought at price 1)
- Option 1: Sell → 3 + dfs(2, false)
- Option 2: Hold → dfs(2, true)

Step 3: From selling at day 1: dfs(2, false)
- At day 2, not holding stock
- Option 1: Buy → -2 + dfs(3, true)
- Option 2: Skip → dfs(3, false)

Step 4: Base cases when day >= 3:
- dfs(3, true) returns 0
- dfs(3, false) returns 0

Backtracking from Step 3:
- Buy: -2 + 0 = -2
- Skip: 0
- dfs(2, false) = max(-2, 0) = 0

Step 5: From holding at day 1: dfs(2, true)
- At day 2, holding stock
- Option 1: Sell → 2 + dfs(3, false) = 2 + 0 = 2
- Option 2: Hold → dfs(3, true) = 0
- dfs(2, true) = max(2, 0) = 2

Backtracking to Step 2:
- Sell: 3 + 0 = 3
- Hold: 2
- dfs(1, true) = max(3, 2) = 3

Step 6: Exploring skip path from day 0: dfs(1, false)
- At day 1, not holding stock
- Option 1: Buy → -3 + dfs(2, true) = -3 + 2 = -1
- Option 2: Skip → dfs(2, false) = 0
- dfs(1, false) = max(-1, 0) = 0

Final calculation at Step 1:
- Buy path: -1 + 3 = 2
- Skip path: 0
- dfs(0, false) = max(2, 0) = 2

Result: Maximum profit is 2
Achieved by: Buy at day 0 (price 1), sell at day 1 (price 3)

Note: Memoization prevents recalculating states like dfs(2, false) and dfs(2, true) when they appear multiple times in different paths.