Problem: Best Time to Buy and Sell Stock II (Dynamic Programming)

Q1: In the DP solution, what does dp[3][1] represent for prices = [7, 1, 5, 3, 6, 4]?
1. The profit made on day 3
2. The maximum profit by day 3 when holding stock
3. The price of stock on day 3
4. Whether we bought stock on day 3

Q2: For prices = [1, 2, 3], what is the value of dp[1][0]?
1. 0 (no transactions yet)
2. 1 (profit from buying on day 0 and selling on day 1)
3. 2 (price on day 1)
4. -1 (cost of holding stock)

Q3: When calculating dp[i][1], why do we use 'dp[i-1][0] - prices[i]'?
1. It represents selling stock on day i
2. It represents the cost of buying stock on day i after not having stock yesterday
3. It calculates the price difference between days
4. It tracks the number of shares we own

Q4: For prices = [7, 1, 5, 3, 6, 4], what is dp[2][0] and how is it calculated?
1. 5, from max(1, -1 + 5) = max(1, 4) = 4
2. 4, from max(0, -6 + 5) = max(0, -1) = 0
3. 4, from max(0, -1 + 5) = max(0, 4) = 4
4. 5, which is the price on day 2

Q5: What is the initialization value of dp[0][1] and why?
1. 0, because we haven't made any transactions
2. -prices[0], because buying stock costs money
3. prices[0], representing the stock value
4. 1, indicating we own one share

Q6: For prices = [3, 2, 1], what are the final values of dp[2][0] and dp[2][1]?
1. dp[2][0] = 0, dp[2][1] = -1
2. dp[2][0] = 1, dp[2][1] = -2
3. dp[2][0] = -1, dp[2][1] = 0
4. dp[2][0] = 2, dp[2][1] = 1

Q7: When filling the DP table, in what order are the states computed?
1. All dp[i][0] values first, then all dp[i][1] values
2. For each day i from 1 to n-1, compute dp[i][0] then dp[i][1]
3. Random order since we have the recurrence relations
4. From dp[n-1][0] backwards to dp[0][0]