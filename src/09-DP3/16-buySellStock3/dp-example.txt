Best Time to Buy and Sell Stock III - Dynamic Programming Example

Let's trace through the DP solution with the same example: prices = [1, 4, 2]

Initial Setup:
- n = 3 (three days), k = 2 (max transactions)
- dp[i][j][0] = max profit on day i with at most j transactions, NOT holding
- dp[i][j][1] = max profit on day i with at most j transactions, holding stock

Step 1: Initialize base cases for day 0
- dp[0][0][0] = 0, dp[0][0][1] = 0 (j=0 means no transactions allowed)
- dp[0][1][0] = 0 (not holding, no transactions yet)
- dp[0][1][1] = -1 (holding, bought at price 1)
- dp[0][2][0] = 0 (not holding, no transactions yet)
- dp[0][2][1] = -1 (holding, bought at price 1)

Step 2: Calculate day 1, j = 1 (at most 1 transaction)
- dp[1][1][0] = max(dp[0][1][0], dp[0][1][1] + prices[1])
             = max(0, -1 + 4) = max(0, 3) = 3
  (Either skip or sell the stock bought on day 0)

- dp[1][1][1] = max(dp[0][1][1], dp[0][0][0] - prices[1])
             = max(-1, 0 - 4) = max(-1, -4) = -1
  (Either keep holding day 0's stock or buy new stock using 0 transactions)

Step 3: Calculate day 1, j = 2 (at most 2 transactions)
- dp[1][2][0] = max(dp[0][2][0], dp[0][2][1] + prices[1])
             = max(0, -1 + 4) = 3
  (Same as j=1 since we haven't used 2 transactions yet)

- dp[1][2][1] = max(dp[0][2][1], dp[0][1][0] - prices[1])
             = max(-1, 0 - 4) = -1
  (Keep holding or buy after 1 transaction completed)

Step 4: Calculate day 2, j = 1
- dp[2][1][0] = max(dp[1][1][0], dp[1][1][1] + prices[2])
             = max(3, -1 + 2) = max(3, 1) = 3
  (Better to keep previous profit than sell now)

- dp[2][1][1] = max(dp[1][1][1], dp[1][0][0] - prices[2])
             = max(-1, 0 - 2) = max(-1, -2) = -1
  (Keep holding original stock is better)

Step 5: Calculate day 2, j = 2
- dp[2][2][0] = max(dp[1][2][0], dp[1][2][1] + prices[2])
             = max(3, -1 + 2) = 3
  (Keep the profit from first transaction)

- dp[2][2][1] = max(dp[1][2][1], dp[1][1][0] - prices[2])
             = max(-1, 3 - 2) = max(-1, 1) = 1
  (Better to buy after completing 1 transaction: net position is +1)

Final DP Table (showing key values):
Day 0: dp[0][1][0]=0, dp[0][1][1]=-1, dp[0][2][0]=0, dp[0][2][1]=-1
Day 1: dp[1][1][0]=3, dp[1][1][1]=-1, dp[1][2][0]=3, dp[1][2][1]=-1
Day 2: dp[2][1][0]=3, dp[2][1][1]=-1, dp[2][2][0]=3, dp[2][2][1]=1

Result: dp[2][2][0] = 3 (max profit with at most 2 transactions, not holding)

Optimal strategy: Buy at day 0 (price 1), sell at day 1 (price 4)
Only 1 transaction needed for maximum profit of 3.