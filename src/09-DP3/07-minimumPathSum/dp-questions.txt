Problem: Minimum Path Sum (Dynamic Programming)

Q1: How is the DP array initialized for minPathSum?
a) All cells set to infinity except dp[0][0] = grid[0][0]
b) All cells set to 0, then filled row by row
c) Copy all values directly from the input grid
d) Set all cells to grid[0][0] value

Q2: How is the first row of the DP array filled?
a) All cells set to the same value
b) Accumulate sums from left: dp[0][j] = dp[0][j-1] + grid[0][j]
c) Copy values directly from grid first row
d) Set all cells to minimum grid value

Q3: What is the recurrence relation for the DP solution?
a) dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]
b) dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
c) dp[i][j] = dp[i-1][j] + dp[i][j-1] + grid[i][j]
d) dp[i][j] = grid[i][j] - min(dp[i-1][j], dp[i][j-1])

Q4: In the space-optimized DP approach, what represents the "previous row"?
a) A hash map storing previous computations
b) A 1D array containing minimum path sums from the row above
c) The original grid row that was just processed
d) A stack containing all previously computed values

Q5: How is the first column of the DP array filled?
a) All cells set to grid[0][0]
b) Accumulate sums from top: dp[i][0] = dp[i-1][0] + grid[i][0]
c) Copy values from grid first column
d) Set to minimum of all grid values

Q6: What is the space complexity of the in-place DP approach?
a) O(m * n) for storing the DP table
b) O(m + n) for processing rows and columns
c) O(1) excluding input space
d) O(min(m, n)) for optimization

Q7: In the space-optimized approach, how is curr[j] calculated?
a) curr[j] = grid[i][j] + max(prev[j], curr[j-1])
b) curr[j] = grid[i][j] + min(prev[j], curr[j-1])
c) curr[j] = min(grid[i][j], prev[j] + curr[j-1])
d) curr[j] = grid[i][j] * min(prev[j], curr[j-1])