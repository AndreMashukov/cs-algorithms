Problem: Best Time to Buy and Sell Stock II (Dynamic Programming)

Q1: What does dp[i][0] represent in the 2D DP table?
1. The number of stocks we can buy on day i
2. The maximum profit on day i when we don't hold stock
3. The minimum price on day i
4. Whether we should buy or sell on day i

Q2: What is the initial value of dp[0][1] and why?
1. 0, because we start with no profit
2. prices[0], because we bought stock on day 0
3. -prices[0], because we spent money to buy stock on day 0
4. 1, because we hold one share of stock

Q3: In the transition dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i]), what does dp[i-1][1] + prices[i] represent?
1. Buying stock on day i-1 and selling on day i
2. Holding stock from day i-1 and selling it on day i
3. The total money spent on transactions
4. The price difference between two consecutive days

Q4: When calculating dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]), what does dp[i-1][0] - prices[i] represent?
1. The loss from selling stock on day i
2. The profit from not holding stock yesterday and buying today
3. The cost of buying stock on day i
4. The price change from day i-1 to day i

Q5: For prices = [1,2,3], what will be the value of dp[1][0] after processing day 1?
1. 0
2. 1
3. 2
4. -1

Q6: Why do we return dp[n-1][0] instead of dp[n-1][1] as the final answer?
1. Because dp[n-1][1] represents buying stock on the last day
2. Because we want to end without holding stock to maximize profit
3. Because dp[n-1][0] is always larger than dp[n-1][1]
4. Because the problem asks for the state where we don't hold stock

Q7: In the space-optimized version, what do the variables 'hold' and 'sold' represent at each iteration?
1. The number of stocks held and sold
2. The current stock price when holding vs selling
3. The maximum profit in holding state vs not holding state
4. The day when we should hold vs sell