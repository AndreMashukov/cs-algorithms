Problem: Best Time to Buy and Sell Stock III (Recursive Example)

Input: prices = [1, 4, 2]

Let's trace through dfs(0, 0, 0) - starting at day 0, not holding stock, 0 transactions completed:

Step 1: dfs(0, 0, 0)
- We're at day 0 with price 1, not holding stock, 0 transactions completed
- Options:
  - Buy today: -1 + dfs(1, 1, 0)
  - Skip today: dfs(1, 0, 0)
- We need to calculate both recursive calls

Step 2: Calculate dfs(1, 1, 0) - day 1, holding stock, 0 transactions
- We're at day 1 with price 4, holding stock, 0 transactions completed
- Options:
  - Sell today: 4 + dfs(2, 0, 1) (complete transaction 1)
  - Keep holding: dfs(2, 1, 0)

Step 3: Calculate dfs(2, 0, 1) - day 2, not holding stock, 1 transaction
- We're at day 2 with price 2, not holding stock, 1 transaction completed
- Options:
  - Buy today: -2 + dfs(3, 1, 1)
  - Skip today: dfs(3, 0, 1)

Step 4: Calculate dfs(3, 1, 1) and dfs(3, 0, 1)
- Both return 0 (base case: day >= prices.length)
- So dfs(2, 0, 1) = max(-2 + 0, 0) = 0

Step 5: Calculate dfs(2, 1, 0) - day 2, holding stock, 0 transactions
- We're at day 2 with price 2, holding stock, 0 transactions completed
- Options:
  - Sell today: 2 + dfs(3, 0, 1) = 2 + 0 = 2
  - Keep holding: dfs(3, 1, 0) = 0
- dfs(2, 1, 0) = max(2, 0) = 2

Step 6: Back to dfs(1, 1, 0)
- Sell today: 4 + dfs(2, 0, 1) = 4 + 0 = 4
- Keep holding: dfs(2, 1, 0) = 2
- dfs(1, 1, 0) = max(4, 2) = 4

Step 7: Calculate dfs(1, 0, 0) - day 1, not holding stock, 0 transactions
- Buy today: -4 + dfs(2, 1, 0) = -4 + 2 = -2
- Skip today: dfs(2, 0, 0) = 0 (similar calculation)
- dfs(1, 0, 0) = max(-2, 0) = 0

Step 8: Back to dfs(0, 0, 0)
- Buy today: -1 + dfs(1, 1, 0) = -1 + 4 = 3
- Skip today: dfs(1, 0, 0) = 0
- dfs(0, 0, 0) = max(3, 0) = 3

Final Answer: 3

The optimal strategy is: Buy at price 1 (day 0), sell at price 4 (day 1) for profit of 3.