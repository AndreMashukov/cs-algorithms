Problem: Best Time to Buy and Sell Stock III (DFS with Memoization)

Q1: What does the parameter 'transactions' represent in the recursive solution?
1. The total number of buy and sell operations
2. The number of completed buy-sell pairs
3. The maximum number of transactions allowed
4. The number of days we've held stock

Q2: In the memoization key "day-holding-transactions", what would be the key when we're at day 2, holding stock, with 1 transaction completed?
1. "2-1-1"
2. "2-0-1"
3. "1-2-1"
4. "2-1-0"

Q3: When we sell stock and the calculation is "prices[day] + dfs(day + 1, 0, transactions + 1)", why do we increment transactions by 1?
1. Because we're starting a new transaction
2. Because selling stock completes a buy-sell transaction pair
3. Because we're moving to the next day
4. Because we're changing the holding state

Q4: What happens when transactions >= 2 in the base case?
1. We can still make one more transaction
2. We return the current stock price
3. We return 0 because no more transactions are allowed
4. We reset the transaction count

Q5: If we're at day 3 with holding=0, transactions=1, and prices=[1,2,3,4,5], what are our two possible actions?
1. Buy at price 4 or sell at price 4
2. Buy at price 4 or skip this day
3. Complete second transaction or wait
4. Sell remaining stock or hold

Q6: In the recursive solution, when we buy stock with "buyToday = -prices[day] + dfs(day + 1, 1, transactions)", why don't we increment transactions?
1. Because buying doesn't complete a transaction
2. Because we're only tracking sell operations
3. Because transactions is only for holding state
4. Because we increment it in the next recursive call

Q7: What is the maximum number of recursive calls possible for a single memoization key?
1. 1, because each key is unique
2. 2, because we have two choices at each step
3. 3, because we have three parameters
4. 4, because we can buy, sell, or skip twice