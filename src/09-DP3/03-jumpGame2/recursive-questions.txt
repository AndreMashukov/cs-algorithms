Problem: Jump Game II (DFS with Memoization)

Q1: In the `dfs(i)` function, what does the parameter `i` represent?
1. The target index we're trying to reach.
2. The number of jumps taken so far.
3. The maximum jump length from the current position.
4. The current index/position in the nums array.

Q2: What is the base case in the `dfs(i)` function?
1. When the memoization table is full.
2. When `i >= n - 1` (reached or passed the last index).
3. When `nums[i] === 0` (can't jump further).
4. When `i === 0` (reached the starting position).

Q3: In the inner loop `for (let jump = 1; jump <= nums[i]; jump++)`, what does this loop accomplish?
1. It explores all possible jump lengths from position i (from 1 to nums[i] steps).
2. It validates whether each jump is legal.
3. It finds the maximum possible jump from position i.
4. It calculates the sum of all possible jumps.

Q4: How does memoization improve the efficiency of the DFS solution?
1. It changes the algorithm from DFS to BFS.
2. It stores previously computed results for each index to avoid redundant calculations.
3. It reduces the space complexity to O(1).
4. It sorts the results for faster lookup.

Q5: What does `minJumps = Math.min(minJumps, 1 + jumpsFromNext)` calculate?
1. The total number of possible paths.
2. The average number of jumps across all paths.
3. The maximum jumps among all possible paths.
4. The minimum jumps needed: 1 (current jump) plus minimum jumps from the next position.

Q6: If `nums = [2,3,1,1,4]` and we call `dfs(0)`, which positions will be explored in the first recursive call?
1. All positions in the array.
2. Only position 1 (since nums[0] = 2, we can jump 1 or 2 steps).
3. Positions 0, 1, and 2.
4. Positions 1 and 2 (since nums[0] = 2, we can jump 1 or 2 steps).

Q7: Why do we initialize `minJumps = Infinity` at the beginning of the `dfs(i)` function?
1. To mark invalid positions.
2. To ensure we find the true minimum by starting with a value larger than any possible result.
3. To prevent integer overflow.
4. To handle the case when nums[i] is 0. 