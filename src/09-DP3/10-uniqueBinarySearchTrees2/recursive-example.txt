Problem: Unique Binary Search Trees II (Recursive with Memoization)

Let's trace through generateTrees_dfs(3) step by step:

Step 1: Initial call dfs(1, 3)
- Key = "1,3"
- Check memo: not found
- start <= end, so continue
- allTrees = []

Step 2: Try root = 1
- leftTrees = dfs(1, 0) - invalid range
- dfs(1, 0): start > end, return [null]
- rightTrees = dfs(2, 3)

Step 3: Compute dfs(2, 3)
- Key = "2,3"
- start <= end, so continue
- allTrees = []

Step 4: Inside dfs(2, 3), try root = 2
- leftTrees = dfs(2, 1) - invalid range, return [null]
- rightTrees = dfs(3, 3) - single node

Step 5: Compute dfs(3, 3)
- Key = "3,3"
- start == end, return [TreeNode(3)]

Step 6: Back to dfs(2, 3), root = 2
- leftTrees = [null], rightTrees = [TreeNode(3)]
- Create: TreeNode(2, null, TreeNode(3))

Step 7: Inside dfs(2, 3), try root = 3
- leftTrees = dfs(2, 2) - single node
- rightTrees = dfs(4, 3) - invalid range

Step 8: Compute dfs(2, 2)
- Key = "2,2"
- start == end, return [TreeNode(2)]

Step 9: Back to dfs(2, 3), root = 3
- leftTrees = [TreeNode(2)], rightTrees = [null]
- Create: TreeNode(3, TreeNode(2), null)

Step 10: dfs(2, 3) complete
- memo["2,3"] = [TreeNode(2, null, TreeNode(3)), TreeNode(3, TreeNode(2), null)]
- Return 2 trees

Step 11: Back to dfs(1, 3), root = 1
- leftTrees = [null], rightTrees = 2 trees from dfs(2, 3)
- Create 2 trees: TreeNode(1, null, tree) for each right tree

Step 12: Try root = 2
- leftTrees = dfs(1, 1) = [TreeNode(1)]
- rightTrees = dfs(3, 3) = [TreeNode(3)]
- Create: TreeNode(2, TreeNode(1), TreeNode(3))

Step 13: Try root = 3
- leftTrees = dfs(1, 2)
- Need to compute dfs(1, 2)...

Step 14: Compute dfs(1, 2) (similar to dfs(2, 3))
- Returns 2 trees with values 1 and 2

Step 15: Back to root = 3
- rightTrees = [null]
- Create 2 trees with root 3

Final Result: 5 unique BST structures total