Problem: Unique Binary Search Trees II (Dynamic Programming)

Let's trace through generateTrees_dp(3) step by step:

Step 1: Initialize
- n = 3
- dp = [[], [], [], []] (arrays for lengths 0-3)

Step 2: Set base cases
- dp[0] = [null] (empty tree)
- dp[1] = [TreeNode(1)] (single node with value 1)

Step 3: Fill dp[2] (length = 2)
Try root = 1:
- leftSize = 0, rightSize = 1
- leftTrees = dp[0] = [null]
- rightTrees = dp[1] = [TreeNode(1)]
- Clone rightTree with offset 1: TreeNode(1+1) = TreeNode(2)
- Create: TreeNode(1, null, TreeNode(2))

Try root = 2:
- leftSize = 1, rightSize = 0  
- leftTrees = dp[1] = [TreeNode(1)]
- rightTrees = dp[0] = [null]
- Create: TreeNode(2, TreeNode(1), null)

dp[2] = [TreeNode(1, null, TreeNode(2)), TreeNode(2, TreeNode(1), null)]

Step 4: Fill dp[3] (length = 3)
Try root = 1:
- leftSize = 0, rightSize = 2
- leftTrees = dp[0] = [null]
- rightTrees = dp[2] = 2 trees with values (1,2)
- Clone rightTrees with offset 1:
  - TreeNode(1, null, TreeNode(2)) → TreeNode(2, null, TreeNode(3))
  - TreeNode(2, TreeNode(1), null) → TreeNode(3, TreeNode(2), null)
- Create 2 trees: TreeNode(1, null, cloned_tree)

Try root = 2:
- leftSize = 1, rightSize = 1
- leftTrees = dp[1] = [TreeNode(1)]
- rightTrees = dp[1] = [TreeNode(1)]
- Clone rightTree with offset 2: TreeNode(1+2) = TreeNode(3)
- Create: TreeNode(2, TreeNode(1), TreeNode(3))

Try root = 3:
- leftSize = 2, rightSize = 0
- leftTrees = dp[2] = 2 trees with values (1,2)
- rightTrees = dp[0] = [null]
- Create 2 trees: TreeNode(3, left_tree, null)

dp[3] contains 5 trees total:
1. TreeNode(1, null, TreeNode(2, null, TreeNode(3)))
2. TreeNode(1, null, TreeNode(3, TreeNode(2), null))
3. TreeNode(2, TreeNode(1), TreeNode(3))
4. TreeNode(3, TreeNode(1, null, TreeNode(2)), null)
5. TreeNode(3, TreeNode(2, TreeNode(1), null), null)

Final Result: 5 unique BST structures with values 1, 2, 3

Key insight: The DP approach builds trees incrementally, using cloneWithOffset to transform smaller trees into the correct value ranges for larger trees.