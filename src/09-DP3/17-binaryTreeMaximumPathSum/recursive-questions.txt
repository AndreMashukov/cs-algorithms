Problem: Binary Tree Maximum Path Sum (DFS with Memoization)

Q1: In the recursive solution, what does the dfs function return for a given node?
1. The maximum path sum that passes through the node
2. The maximum path sum that starts from the node and goes down
3. The total sum of all nodes in the subtree
4. The maximum value found in the subtree

Q2: For a tree with root value -10, left child 9, and right child 20, 
why do we use Math.max(0, dfs(node.left))?
1. To ensure we don't include negative path sums that would decrease our total
2. To count the number of positive nodes
3. To prevent null pointer exceptions
4. To find the maximum node value

Q3: When processing a node with value 5, left max path 3, and right max path 7, what is maxThroughNode?
1. 7 (the maximum child value)
2. 10 (5 + max(3, 7))
3. 15 (5 + 3 + 7)
4. 5 (just the node value)

Q4: For the tree [1, -2, 3], what value does dfs return for the root node?
1. 2 (sum of positive nodes)
2. 4 (1 + 3)
3. 1 (root value only)
4. 3 (root + right child)

Q5: Why do we maintain a separate globalMax variable instead of just returning the maximum?
1. Because the maximum path might not include the root
2. To count the number of paths checked
3. To store intermediate calculations
4. To avoid recalculating child values

Q6: When computing maxPathDown, why do we use Math.max(leftMax, rightMax) 
instead of leftMax + rightMax?
1. We can only extend the path in one direction when connecting to parent
2. We want to find the single maximum value
3. Adding both would create a cycle
4. It's an optimization for negative values

Q7: For a node with value -5, left contribution 10, and right contribution 8, 
what value is returned by dfs?
1. 13 (-5 + 10 + 8)
2. 5 (-5 + 10)
3. 3 (-5 + 8)
4. 10 (maximum child contribution)