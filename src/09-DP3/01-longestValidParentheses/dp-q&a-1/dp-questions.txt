Problem: Longest Valid Parentheses (DP approach)

Q1: What does `dp[i]` represent in the `longestValidParentheses_dp` function?
1. Whether the character `s[i]` is an opening or closing parenthesis.
2. The total count of valid parentheses in the substring `s[0...i]`.
3. The length of the longest valid parentheses *substring ending at index i*.
4. The starting index of the longest valid parentheses substring ending at index `i`.

Q2: In the DP solution, when `s[i] === ')'` and `s[i-1] === '('`, 
how is `dp[i]` calculated (e.g., for a string like `...ab()`)?
1. `dp[i] = dp[i-1] + 1`
2. `dp[i] = (i >= 2 ? dp[i-2] : 0) + 2`
3. `dp[i] = 2`
4. `dp[i] = dp[i-1] + 2`

Q3: Consider the case `s[i] === ')'` and `s[i-1] === ')'` (e.g., `...())`). 
The code checks `s[i - dp[i-1] - 1] === '('`. 
What is `s[i - dp[i-1] - 1]` attempting to find?
1. The character immediately preceding `s[i]`. 
2. The start of the potential valid segment that `s[i-1]` is part of.
3. A matching opening parenthesis for `s[i]` 
that is located before the valid parentheses segment 
ending at `s[i-1]`.
4. The first character of the entire string `s`.

Q4: If `s = "()(()) "` and the loop is at `i = 5` (character `s[5] = ')'`, 
which is the last `)`), 
and assuming `dp` values have been correctly computed up to `i=4` 
(`dp = [0,2,0,0,2,0]`), 
what would be the intermediate values used to calculate `dp[5]`?
(Note: `s[4] = ')'`, `dp[i-1]` which is `dp[4]` is `2`. 
The character `s[i - dp[i-1] - 1]` is `s[5 - 2 - 1] = s[2] = '('`.)
1. `dp[4]` (which is 2), plus 2, plus `dp[5-2-2]` (which is `dp[1]` = 2).
2. `dp[4]` (which is 2), plus 2.
3. It will use `dp[i-2]` (which is `dp[3]` = 0) + 2.
4. `dp[5]` would be directly set to 6 without referencing previous `dp` values for this specific `i`.

Q5: Why is `maxLength` updated inside the loop (`maxLength = Math.max(maxLength, dp[i])`) 
instead of just returning `dp[s.length - 1]` at the end?
1. Because `dp[s.length - 1]` might not exist if the string is empty.
2. The longest valid parentheses substring might not necessarily end 
at the last character of the string.
3. To save space by not storing all `dp` values.
4. It's a more efficient way to find the maximum value in the `dp` array.

Q6: If the input string `s` is `"((("`, what will be the final `dp` array and the returned `maxLength`?
1. `dp = [0,0,0]`, `maxLength = 0`
2. `dp = [0,2,0]`, `maxLength = 2`
3. `dp = [0,0,2]`, `maxLength = 2`
4. `dp = [2,2,2]`, `maxLength = 2`

Q7: In the condition `else if (i - dp[i-1] > 0 && s[i - dp[i-1] - 1] === '(')`, what does `i - dp[i-1] > 0` ensure before accessing `s[i - dp[i-1] - 1]`?
1. It ensures that `s[i-1]` was part of a valid segment.
2. It ensures that the index `i - dp[i-1] - 1` is a valid non-negative index within the string `s`.
3. It ensures that `dp[i-1]` is greater than 0.
4. It checks if the character `s[i]` has a matching `(`. 