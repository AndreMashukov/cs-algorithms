Problem: Wildcard Matching (DP approach)

Q1: What does `dp[i][j]` represent in the `isMatchWildcard_dp` function?
1. Whether the first `i` characters of string `s` match the first `j` 
  characters of pattern `p`.
2. The number of ways to match `s[0...i-1]` with `p[0...j-1]`.
3. The cost of matching `s[0...i-1]` with `p[0...j-1]`.
4. The index where the match starts between `s` and `p`.

Q2: Why is `dp[0][0]` initialized to `true`?
1. Because the first characters of both strings always match.
2. Because we assume the strings are valid by default.
3. To handle the base case of single character matching.
4. Because an empty string matches an empty pattern.

Q3: In the base case initialization, when does `dp[0][j] = dp[0][j-1]` for pattern characters?
1. When `p[j-1]` is '?' because it can match any character.
2. When `p[j-1]` is a regular character that matches `s[0]`.
3. When `p[j-1]` is '*' because it can match an empty sequence, 
  so its ability to match an empty string depends 
  on whether the previous pattern could match an empty string.
4. When we want to skip pattern character `p[j-1]`.

Q4: If `pChar === '*'`, the DP transition is `dp[i][j] = dp[i][j-1] || dp[i-1][j]`. 
  What do these two components represent?
1. `dp[i][j-1]`: '*' matches exactly one character; `dp[i-1][j]`: '*' matches multiple characters.
2. `dp[i][j-1]`: Try without using '*'; `dp[i-1][j]`: Use '*' to match current character.
3. Both represent different ways to handle '*' character placement.
4. `dp[i][j-1]`: '*' matches an empty sequence (skip '*' in pattern); 
  `dp[i-1][j]`: '*' matches at least the current character `s[i-1]` 
  (consume character from string, '*' can match more).

Q5: When `pChar === '?' || sChar === pChar`, why is `dp[i][j] = dp[i-1][j-1]`?
1. Because we're skipping both characters.
2. Because we're advancing only the pattern index.
3. Because both the current string character and pattern character 
  are consumed (either they match exactly or '?' matches any character), 
  so the result depends on whether the prefixes matched.
4. Because '?' always matches and we need to check the previous state.

Q6: Consider `s = "ab"` and `p = "*b"`. Trace the DP table construction. 
  What will be the value of `dp[2][2]` (final result)?
1. `true`, because '*' can match 'a' and then 'b' matches 'b'.
2. `false`, because 'a' doesn't match 'b'.
3. `false`, because the pattern is too short.
4. `true`, but only because of a special case handling.

Q7: If we have `s = "abc"` and `p = "a?c"`, what determines the final result `dp[3][3]`?
1. Whether `dp[0][0]` was correctly initialized.
2. Whether '*' characters were handled correctly.
3. The total number of characters in both strings.
4. The sequential matching: 'a' matches 'a', '?' matches 'b', 'c' matches 'c', 
  so `dp[3][3]` depends on `dp[2][2]`, which depends on `dp[1][1]`, 
  which depends on `dp[0][0]`. 