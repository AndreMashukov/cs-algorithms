Maximum Product Subarray - Dynamic Programming Approach Example Walkthrough

Problem: Given array nums = [2, -5, -2, 4]
Goal: Find the maximum product of any contiguous subarray using bottom-up DP

Input: nums = [2, -5, -2, 4] (length n = 4)

DP Arrays Initialization:
- dp_max = new Array(4)  // Maximum product ending at each position
- dp_min = new Array(4)  // Minimum product ending at each position
- result = nums[0] = 2   // Global maximum tracker

=== Step 0: Base Case ===
i = 0, nums[0] = 2

dp_max[0] = nums[0] = 2
dp_min[0] = nums[0] = 2
result = Math.max(result, dp_max[0]) = Math.max(2, 2) = 2

Current state:
dp_max = [2, ?, ?, ?]
dp_min = [2, ?, ?, ?]
result = 2

=== Step 1: Process nums[1] = -5 ===
i = 1, nums[1] = -5

Calculate three options:
- option1 = nums[1] = -5
- option2 = dp_max[0] * nums[1] = 2 * (-5) = -10
- option3 = dp_min[0] * nums[1] = 2 * (-5) = -10

dp_max[1] = Math.max(-5, -10, -10) = -5
dp_min[1] = Math.min(-5, -10, -10) = -10
result = Math.max(result, dp_max[1]) = Math.max(2, -5) = 2

Current state:
dp_max = [2, -5, ?, ?]
dp_min = [2, -10, ?, ?]
result = 2

Analysis: At position 1, the best we can do is start fresh with [-5] rather than extending [2] to get [2, -5] = -10.

=== Step 2: Process nums[2] = -2 ===
i = 2, nums[2] = -2

Calculate three options:
- option1 = nums[2] = -2
- option2 = dp_max[1] * nums[2] = (-5) * (-2) = 10
- option3 = dp_min[1] * nums[2] = (-10) * (-2) = 20

dp_max[2] = Math.max(-2, 10, 20) = 20
dp_min[2] = Math.min(-2, 10, 20) = -2
result = Math.max(result, dp_max[2]) = Math.max(2, 20) = 20

Current state:
dp_max = [2, -5, 20, ?]
dp_min = [2, -10, -2, ?]
result = 20

Analysis: The key insight here! The minimum product from position 1 (-10) becomes the maximum when multiplied by the negative number -2. This gives us 20, which comes from the subarray [2, -5, -2].

=== Step 3: Process nums[3] = 4 ===
i = 3, nums[3] = 4

Calculate three options:
- option1 = nums[3] = 4
- option2 = dp_max[2] * nums[3] = 20 * 4 = 80
- option3 = dp_min[2] * nums[3] = (-2) * 4 = -8

dp_max[3] = Math.max(4, 80, -8) = 80
dp_min[3] = Math.min(4, 80, -8) = -8
result = Math.max(result, dp_max[3]) = Math.max(20, 80) = 80

Final state:
dp_max = [2, -5, 20, 80]
dp_min = [2, -10, -2, -8]
result = 80

=== Space-Optimized Version Walkthrough ===

Instead of arrays, use variables:
maxEndingHere = 2, minEndingHere = 2, maxSoFar = 2

i = 1, nums[1] = -5:
  tempMax = maxEndingHere = 2
  maxEndingHere = Math.max(-5, 2 * (-5), 2 * (-5)) = Math.max(-5, -10, -10) = -5
  minEndingHere = Math.min(-5, 2 * (-5), 2 * (-5)) = Math.min(-5, -10, -10) = -10
  maxSoFar = Math.max(2, -5) = 2

i = 2, nums[2] = -2:
  tempMax = maxEndingHere = -5
  maxEndingHere = Math.max(-2, (-5) * (-2), (-10) * (-2)) = Math.max(-2, 10, 20) = 20
  minEndingHere = Math.min(-2, (-5) * (-2), (-10) * (-2)) = Math.min(-2, 10, 20) = -2
  maxSoFar = Math.max(2, 20) = 20

i = 3, nums[3] = 4:
  tempMax = maxEndingHere = 20
  maxEndingHere = Math.max(4, 20 * 4, (-2) * 4) = Math.max(4, 80, -8) = 80
  minEndingHere = Math.min(4, 20 * 4, (-2) * 4) = Math.min(4, 80, -8) = -8
  maxSoFar = Math.max(20, 80) = 80

=== Analysis of Subarray Products ===

All possible contiguous subarrays and their products:
[2] = 2
[2, -5] = -10
[2, -5, -2] = 20 ✓ (contributes to final answer)
[2, -5, -2, 4] = 80 ✓ (final answer)
[-5] = -5
[-5, -2] = 10
[-5, -2, 4] = 40
[-2] = -2
[-2, 4] = -8
[4] = 4

Maximum = 80 from subarray [2, -5, -2, 4]

=== Key DP Insights ===

1. **Why track both max and min**: At position 2, the minimum product from position 1 (-10) becomes the maximum (20) when multiplied by negative number -2.

2. **Three choices at each position**:
   - Start new subarray: nums[i]
   - Extend previous max: dp_max[i-1] * nums[i]  
   - Extend previous min: dp_min[i-1] * nums[i] (can become max if both negative)

3. **Sign flipping**: Negative numbers can turn the smallest product into the largest product.

4. **Space optimization**: Since dp[i] only depends on dp[i-1], we can use O(1) space instead of O(n).

=== Final Result ===
Maximum Product Subarray = 80 (from subarray [2, -5, -2, 4])