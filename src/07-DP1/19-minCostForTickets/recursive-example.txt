Example Walkthrough for Minimum Cost For Tickets (DFS with Memoization)

Consider the input:
Days: [1, 4, 6, 7, 8, 20]
Costs: [2, 7, 15]

Step-by-step Execution:

1. Start DFS from day 1 (index 0):
   - Try 1-day pass: Covers day 1, cost = 2 + DFS(day 2)
   - Try 7-day pass: Covers days 1-7, cost = 7 + DFS(day 8)
   - Try 30-day pass: Covers days 1-30, cost = 15 + DFS(day 31)

2. DFS(day 2):
   - Try 1-day pass: Covers day 4, cost = 2 + DFS(day 3)
   - Try 7-day pass: Covers days 4-10, cost = 7 + DFS(day 11)
   - Try 30-day pass: Covers days 4-33, cost = 15 + DFS(day 34)

3. Continue this process, caching results in the memoization map.

4. Base case reached when all days are covered, returning 0.

5. Use cached results to avoid redundant calculations.

6. Final result is the minimum cost calculated from the initial DFS call.

Memoization Updates:
- Cache results for each index to optimize recursive calls.
- Example: memo[0] = 11, memo[1] = 9, etc.

This approach efficiently calculates the minimum cost by exploring all possible pass combinations and caching results to avoid redundant calculations. 